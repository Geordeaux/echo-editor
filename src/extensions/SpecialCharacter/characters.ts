export interface CharacterCategory {
  name: string
  characters: Character[]
}

export interface Character {
  code: number
  name: string
  char: string
}

// 货币符号
const currencyCharacters: Character[] = [
  { code: 36, name: 'dollar sign', char: '$' },
  { code: 162, name: 'cent sign', char: '¢' },
  { code: 8364, name: 'euro sign', char: '€' },
  { code: 163, name: 'pound sign', char: '£' },
  { code: 165, name: 'yen sign', char: '¥' },
  { code: 164, name: 'currency sign', char: '¤' },
  { code: 8352, name: 'euro-currency sign', char: '₠' },
  { code: 8353, name: 'colon sign', char: '₡' },
  { code: 8354, name: 'cruzeiro sign', char: '₢' },
  { code: 8355, name: 'french franc sign', char: '₣' },
  { code: 8356, name: 'lira sign', char: '₤' },
  { code: 8357, name: 'mill sign', char: '₥' },
  { code: 8358, name: 'naira sign', char: '₦' },
  { code: 8359, name: 'peseta sign', char: '₧' },
  { code: 8360, name: 'rupee sign', char: '₨' },
  { code: 8361, name: 'won sign', char: '₩' },
  { code: 8362, name: 'new sheqel sign', char: '₪' },
  { code: 8363, name: 'dong sign', char: '₫' },
  { code: 8365, name: 'kip sign', char: '₭' },
  { code: 8366, name: 'tugrik sign', char: '₮' },
  { code: 8367, name: 'drachma sign', char: '₯' },
  { code: 8368, name: 'german penny symbol', char: '₰' },
  { code: 8369, name: 'peso sign', char: '₱' },
  { code: 8370, name: 'guarani sign', char: '₲' },
  { code: 8371, name: 'austral sign', char: '₳' },
  { code: 8372, name: 'hryvnia sign', char: '₴' },
  { code: 8373, name: 'cedi sign', char: '₵' },
  { code: 8374, name: 'livre tournois sign', char: '₶' },
  { code: 8375, name: 'spesmilo sign', char: '₷' },
  { code: 8376, name: 'tenge sign', char: '₸' },
  { code: 8377, name: 'indian rupee sign', char: '₹' },
  { code: 8378, name: 'turkish lira sign', char: '₺' },
  { code: 8379, name: 'nordic mark sign', char: '₻' },
  { code: 8380, name: 'manat sign', char: '₼' },
  { code: 8381, name: 'ruble sign', char: '₽' },
  { code: 20870, name: 'yen character', char: '円' },
  { code: 20803, name: 'yuan character', char: '元' },
  { code: 22291, name: 'yuan character, in hong kong and taiwan', char: '圓' },
  { code: 22278, name: 'yen/yuan character variant one', char: '圓' },
]

// 文本符号
const textCharacters: Character[] = [
  { code: 169, name: 'copyright sign', char: '©' },
  { code: 174, name: 'registered sign', char: '®' },
  { code: 8482, name: 'trade mark sign', char: '™' },
  { code: 8240, name: 'per mille sign', char: '‰' },
  { code: 181, name: 'micro sign', char: 'µ' },
  { code: 183, name: 'middle dot', char: '·' },
  { code: 8226, name: 'bullet', char: '•' },
  { code: 8230, name: 'three dot leader', char: '…' },
  { code: 8242, name: 'minutes / feet', char: '′' },
  { code: 8243, name: 'seconds / inches', char: '″' },
  { code: 167, name: 'section sign', char: '§' },
  { code: 182, name: 'paragraph sign', char: '¶' },
  { code: 223, name: 'sharp s / ess-zed', char: 'ß' },
]

// 引号和标点符号
const quotationCharacters: Character[] = [
  { code: 8249, name: 'single left-pointing angle quotation mark', char: '‹' },
  { code: 8250, name: 'single right-pointing angle quotation mark', char: '›' },
  { code: 171, name: 'left pointing guillemet', char: '«' },
  { code: 187, name: 'right pointing guillemet', char: '»' },
  { code: 8216, name: 'left single quotation mark', char: '‘' },
  { code: 8217, name: 'right single quotation mark', char: '’' },
  { code: 8220, name: 'left double quotation mark', char: '"' },
  { code: 8221, name: 'right double quotation mark', char: '"' },
  { code: 8218, name: 'single low-9 quotation mark', char: ',' },
  { code: 8222, name: 'double low-9 quotation mark', char: '„' },
  { code: 60, name: 'less-than sign', char: '<' },
  { code: 62, name: 'greater-than sign', char: '>' },
  { code: 8804, name: 'less-than or equal to', char: '≤' },
  { code: 8805, name: 'greater-than or equal to', char: '≥' },
  { code: 8211, name: 'en dash', char: '–' },
  { code: 8212, name: 'em dash', char: '—' },
  { code: 175, name: 'macron', char: '¯' },
  { code: 8254, name: 'overline', char: '‾' },
  { code: 164, name: 'currency sign', char: '¤' },
  { code: 166, name: 'broken bar', char: '¦' },
  { code: 168, name: 'diaeresis', char: '¨' },
  { code: 161, name: 'inverted exclamation mark', char: '¡' },
  { code: 191, name: 'turned question mark', char: '¿' },
  { code: 710, name: 'circumflex accent', char: 'ˆ' },
  { code: 732, name: 'small tilde', char: '˜' },
  { code: 176, name: 'degree sign', char: '°' },
  { code: 8722, name: 'minus sign', char: '−' },
  { code: 177, name: 'plus-minus sign', char: '±' },
  { code: 247, name: 'division sign', char: '÷' },
  { code: 8260, name: 'fraction slash', char: '⁄' },
  { code: 215, name: 'multiplication sign', char: '×' },
  { code: 185, name: 'superscript one', char: '¹' },
  { code: 178, name: 'superscript two', char: '²' },
  { code: 179, name: 'superscript three', char: '³' },
  { code: 188, name: 'fraction one quarter', char: '¼' },
  { code: 189, name: 'fraction one half', char: '½' },
  { code: 190, name: 'fraction three quarters', char: '¾' },
]

// 数学符号
const mathematicalCharacters: Character[] = [
  { code: 402, name: 'function / florin', char: 'ƒ' },
  { code: 8747, name: 'integral', char: '∫' },
  { code: 8721, name: 'n-ary sumation', char: '∑' },
  { code: 8734, name: 'infinity', char: '∞' },
  { code: 8730, name: 'square root', char: '√' },
  { code: 8764, name: 'similar to', char: '∼' },
  { code: 8773, name: 'approximately equal to', char: '≅' },
  { code: 8776, name: 'almost equal to', char: '≈' },
  { code: 8800, name: 'not equal to', char: '≠' },
  { code: 8801, name: 'identical to', char: '≡' },
  { code: 8712, name: 'element of', char: '∈' },
  { code: 8713, name: 'not an element of', char: '∉' },
  { code: 8715, name: 'contains as member', char: '∋' },
  { code: 8719, name: 'n-ary product', char: '∏' },
  { code: 8743, name: 'logical and', char: '∧' },
  { code: 8744, name: 'logical or', char: '∨' },
  { code: 172, name: 'not sign', char: '¬' },
  { code: 8745, name: 'intersection', char: '∩' },
  { code: 8746, name: 'union', char: '∪' },
  { code: 8706, name: 'partial differential', char: '∂' },
  { code: 8704, name: 'for all', char: '∀' },
  { code: 8707, name: 'there exists', char: '∃' },
  { code: 8709, name: 'diameter', char: '∅' },
  { code: 8711, name: 'backward difference', char: '∇' },
  { code: 8727, name: 'asterisk operator', char: '∗' },
  { code: 8733, name: 'proportional to', char: '∝' },
  { code: 8736, name: 'angle', char: '∟' },
]

// 扩展拉丁字母
const extendedLatinCharacters: Character[] = [
  { code: 192, name: 'A - grave', char: 'À' },
  { code: 193, name: 'A - acute', char: 'Á' },
  { code: 194, name: 'A - circumflex', char: 'Â' },
  { code: 195, name: 'A - tilde', char: 'Ã' },
  { code: 196, name: 'A - diaeresis', char: 'Ä' },
  { code: 197, name: 'A - ring above', char: 'Å' },
  { code: 256, name: 'A - macron', char: 'Ā' },
  { code: 198, name: 'ligature AE', char: 'Æ' },
  { code: 199, name: 'C - cedilla', char: 'Ç' },
  { code: 200, name: 'E - grave', char: 'È' },
  { code: 201, name: 'E - acute', char: 'É' },
  { code: 202, name: 'E - circumflex', char: 'Ê' },
  { code: 203, name: 'E - diaeresis', char: 'Ë' },
  { code: 274, name: 'E - macron', char: 'Ē' },
  { code: 204, name: 'I - grave', char: 'Ì' },
  { code: 205, name: 'I - acute', char: 'Í' },
  { code: 206, name: 'I - circumflex', char: 'Î' },
  { code: 207, name: 'I - diaeresis', char: 'Ï' },
  { code: 298, name: 'I - macron', char: 'Ī' },
  { code: 208, name: 'ETH', char: 'Ð' },
  { code: 209, name: 'N - tilde', char: 'Ñ' },
  { code: 210, name: 'O - grave', char: 'Ò' },
  { code: 211, name: 'O - acute', char: 'Ó' },
  { code: 212, name: 'O - circumflex', char: 'Ô' },
  { code: 213, name: 'O - tilde', char: 'Õ' },
  { code: 214, name: 'O - diaeresis', char: 'Ö' },
  { code: 216, name: 'O - slash', char: 'Ø' },
  { code: 332, name: 'O - macron', char: 'Ō' },
  { code: 338, name: 'ligature OE', char: 'Œ' },
  { code: 352, name: 'S - caron', char: 'Š' },
  { code: 217, name: 'U - grave', char: 'Ù' },
  { code: 218, name: 'U - acute', char: 'Ú' },
  { code: 219, name: 'U - circumflex', char: 'Û' },
  { code: 220, name: 'U - diaeresis', char: 'Ü' },
  { code: 362, name: 'U - macron', char: 'Ū' },
  { code: 221, name: 'Y - acute', char: 'Ý' },
  { code: 376, name: 'Y - diaeresis', char: 'Ÿ' },
  { code: 562, name: 'Y - macron', char: 'Ȳ' },
  { code: 222, name: 'THORN', char: 'Þ' },
  { code: 224, name: 'a - grave', char: 'à' },
  { code: 225, name: 'a - acute', char: 'á' },
  { code: 226, name: 'a - circumflex', char: 'â' },
  { code: 227, name: 'a - tilde', char: 'ã' },
  { code: 228, name: 'a - diaeresis', char: 'ä' },
  { code: 229, name: 'a - ring above', char: 'å' },
  { code: 257, name: 'a - macron', char: 'ā' },
  { code: 230, name: 'ligature ae', char: 'æ' },
  { code: 231, name: 'c - cedilla', char: 'ç' },
  { code: 232, name: 'e - grave', char: 'è' },
  { code: 233, name: 'e - acute', char: 'é' },
  { code: 234, name: 'e - circumflex', char: 'ê' },
  { code: 235, name: 'e - diaeresis', char: 'ë' },
  { code: 275, name: 'e - macron', char: 'ē' },
  { code: 236, name: 'i - grave', char: 'ì' },
  { code: 237, name: 'i - acute', char: 'í' },
  { code: 238, name: 'i - circumflex', char: 'î' },
  { code: 239, name: 'i - diaeresis', char: 'ï' },
  { code: 299, name: 'i - macron', char: 'ī' },
  { code: 240, name: 'eth', char: 'ð' },
  { code: 241, name: 'n - tilde', char: 'ñ' },
  { code: 242, name: 'o - grave', char: 'ò' },
  { code: 243, name: 'o - acute', char: 'ó' },
  { code: 244, name: 'o - circumflex', char: 'ô' },
  { code: 245, name: 'o - tilde', char: 'õ' },
  { code: 246, name: 'o - diaeresis', char: 'ö' },
  { code: 248, name: 'o slash', char: 'ø' },
  { code: 333, name: 'o macron', char: 'ō' },
  { code: 339, name: 'ligature oe', char: 'œ' },
  { code: 353, name: 's - caron', char: 'š' },
  { code: 249, name: 'u - grave', char: 'ù' },
  { code: 250, name: 'u - acute', char: 'ú' },
  { code: 251, name: 'u - circumflex', char: 'û' },
  { code: 252, name: 'u - diaeresis', char: 'ü' },
  { code: 363, name: 'u - macron', char: 'ū' },
  { code: 253, name: 'y - acute', char: 'ý' },
  { code: 254, name: 'thorn', char: 'þ' },
  { code: 255, name: 'y - diaeresis', char: 'ÿ' },
  { code: 563, name: 'y - macron', char: 'ȳ' },
  { code: 913, name: 'Alpha', char: 'Α' },
  { code: 914, name: 'Beta', char: 'Β' },
  { code: 915, name: 'Gamma', char: 'Γ' },
  { code: 916, name: 'Delta', char: 'Δ' },
  { code: 917, name: 'Epsilon', char: 'Ε' },
  { code: 918, name: 'Zeta', char: 'Ζ' },
  { code: 919, name: 'Eta', char: 'Η' },
  { code: 920, name: 'Theta', char: 'Θ' },
  { code: 921, name: 'Iota', char: 'Ι' },
  { code: 922, name: 'Kappa', char: 'Κ' },
  { code: 923, name: 'Lambda', char: 'Λ' },
  { code: 924, name: 'Mu', char: 'Μ' },
  { code: 925, name: 'Nu', char: 'Ν' },
  { code: 926, name: 'Xi', char: 'Ξ' },
  { code: 927, name: 'Omicron', char: 'Ο' },
  { code: 928, name: 'Pi', char: 'Π' },
  { code: 929, name: 'Rho', char: 'Ρ' },
  { code: 931, name: 'Sigma', char: 'Σ' },
  { code: 932, name: 'Tau', char: 'Τ' },
  { code: 933, name: 'Upsilon', char: 'Υ' },
  { code: 934, name: 'Phi', char: 'Φ' },
  { code: 935, name: 'Chi', char: 'Χ' },
  { code: 936, name: 'Psi', char: 'Ψ' },
  { code: 937, name: 'Omega', char: 'Ω' },
  { code: 945, name: 'alpha', char: 'α' },
  { code: 946, name: 'beta', char: 'β' },
  { code: 947, name: 'gamma', char: 'γ' },
  { code: 948, name: 'delta', char: 'δ' },
  { code: 949, name: 'epsilon', char: 'ε' },
  { code: 950, name: 'zeta', char: 'ζ' },
  { code: 951, name: 'eta', char: 'η' },
  { code: 952, name: 'theta', char: 'θ' },
  { code: 953, name: 'iota', char: 'ι' },
  { code: 954, name: 'kappa', char: 'κ' },
  { code: 955, name: 'lambda', char: 'λ' },
  { code: 956, name: 'mu', char: 'μ' },
  { code: 957, name: 'nu', char: 'ν' },
  { code: 958, name: 'xi', char: 'ξ' },
  { code: 959, name: 'omicron', char: 'ο' },
  { code: 960, name: 'pi', char: 'π' },
  { code: 961, name: 'rho', char: 'ρ' },
  { code: 962, name: 'final sigma', char: 'ς' },
  { code: 963, name: 'sigma', char: 'σ' },
  { code: 964, name: 'tau', char: 'τ' },
  { code: 965, name: 'upsilon', char: 'υ' },
  { code: 966, name: 'phi', char: 'φ' },
  { code: 967, name: 'chi', char: 'χ' },
  { code: 968, name: 'psi', char: 'ψ' },
  { code: 969, name: 'omega', char: 'ω' },
]

// 符号
const symbolCharacters: Character[] = [
  { code: 8501, name: 'alef symbol', char: 'ℵ' },
  { code: 982, name: 'pi symbol', char: 'ϖ' },
  { code: 8476, name: 'real part symbol', char: 'ℜ' },
  { code: 978, name: 'upsilon - hook symbol', char: 'ϒ' },
  { code: 8472, name: 'Weierstrass p', char: '℘' },
  { code: 8465, name: 'imaginary part', char: 'ℑ' },
]

// 箭头
const arrowCharacters: Character[] = [
  { code: 8592, name: 'leftwards arrow', char: '←' },
  { code: 8593, name: 'upwards arrow', char: '↑' },
  { code: 8594, name: 'rightwards arrow', char: '→' },
  { code: 8595, name: 'downwards arrow', char: '↓' },
  { code: 8596, name: 'left right arrow', char: '↔' },
  { code: 8629, name: 'carriage return', char: '↵' },
  { code: 8656, name: 'leftwards double arrow', char: '⇐' },
  { code: 8657, name: 'upwards double arrow', char: '⇑' },
  { code: 8658, name: 'rightwards double arrow', char: '⇒' },
  { code: 8659, name: 'downwards double arrow', char: '⇓' },
  { code: 8660, name: 'left right double arrow', char: '⇔' },
  { code: 8756, name: 'therefore', char: '∴' },
  { code: 8834, name: 'subset of', char: '⊂' },
  { code: 8835, name: 'superset of', char: '⊃' },
  { code: 8836, name: 'not a subset of', char: '⊄' },
  { code: 8838, name: 'subset of or equal to', char: '⊆' },
  { code: 8839, name: 'superset of or equal to', char: '⊇' },
  { code: 8853, name: 'circled plus', char: '⊕' },
  { code: 8855, name: 'circled times', char: '⊗' },
  { code: 8869, name: 'perpendicular', char: '⊥' },
  { code: 8901, name: 'dot operator', char: '⋅' },
  { code: 8968, name: 'left ceiling', char: '⌈' },
  { code: 8969, name: 'right ceiling', char: '⌉' },
  { code: 8970, name: 'left floor', char: '⌊' },
  { code: 8971, name: 'right floor', char: '⌋' },
  { code: 9001, name: 'left-pointing angle bracket', char: '〈' },
  { code: 9002, name: 'right-pointing angle bracket', char: '〉' },
  { code: 9674, name: 'lozenge', char: '◊' },
  { code: 9824, name: 'black spade suit', char: '♠' },
  { code: 9827, name: 'black club suit', char: '♣' },
  { code: 9829, name: 'black heart suit', char: '♥' },
  { code: 9830, name: 'black diamond suit', char: '♦' },
  { code: 8194, name: 'en space', char: ' ' },
  { code: 8195, name: 'em space', char: ' ' },
  { code: 8201, name: 'thin space', char: ' ' },
  { code: 8204, name: 'zero width non-joiner', char: '‌' },
  { code: 8205, name: 'zero width joiner', char: '‍' },
  { code: 8206, name: 'left-to-right mark', char: '‎' },
  { code: 8207, name: 'right-to-left mark', char: '‏' },
]



// 所有字符分类
export const characterCategories: CharacterCategory[] = [
  {
    name: 'currency',
    characters: currencyCharacters,
  },
  {
    name: 'text',
    characters: textCharacters,
  },
  {
    name: 'quotations',
    characters: quotationCharacters,
  },
  {
    name: 'mathematical',
    characters: mathematicalCharacters,
  },
  {
    name: 'extendedLatin',
    characters: extendedLatinCharacters,
  },
  {
    name: 'symbols',
    characters: symbolCharacters,
  },
  {
    name: 'arrows',
    characters: arrowCharacters,
  },
]

// 创建"全部"分类，包含所有字符
export const allCharacters: Character[] = characterCategories
  .filter(category => category.name !== 'userDefined')
  .flatMap(category => category.characters)

export const allCategories: CharacterCategory[] = [
  {
    name: 'all',
    characters: allCharacters,
  },
  ...characterCategories,
]

// 搜索字符
export function searchCharacters(characters: Character[], searchTerm: string): Character[] {
  if (!searchTerm) return characters

  const term = searchTerm.toLowerCase()
  return characters.filter(char =>
    char.name.toLowerCase().includes(term) ||
    char.char.toLowerCase().includes(term) ||
    char.char.toLowerCase().replace(/\s+/g, '').includes(term)
  )
}
